import * as tf from '@tensorflow/tfjs';
import { GraphModel } from "@tensorflow/tfjs-converter/dist/executor/graph_model";
export interface ModelConfig {
    source: string | File[];
    classNames?: string[];
}
export declare const YOLO_V5_N_COCO_MODEL_CONFIG: ModelConfig;
export declare const YOLO_V5_S_COCO_MODEL_CONFIG: ModelConfig;
export declare const YOLO_V5_M_COCO_MODEL_CONFIG: ModelConfig;
export interface DetectedObject {
    x: number;
    y: number;
    width: number;
    height: number;
    score: number;
    classId: number;
    class?: string;
}
export declare class YOLOv5 {
    model: GraphModel;
    inferenceResolution: [number, number];
    classNames?: string[];
    constructor(model: GraphModel, inferenceResolution: [number, number], classNames?: string[]);
    static preprocessImage(image: HTMLImageElement | HTMLCanvasElement, inferenceResolution: [number, number]): [tf.Tensor4D, [number, number]];
    static postprocessResults(boxes: Float32Array, scores: Float32Array, classes: Float32Array, inputResolution: [number, number], classNames?: string[], minScore?: number): DetectedObject[];
    detect(image: HTMLImageElement | HTMLCanvasElement, minScore?: number): Promise<DetectedObject[]>;
}
export declare function load(config: ModelConfig, inputResolution?: [number, number]): Promise<YOLOv5>;
